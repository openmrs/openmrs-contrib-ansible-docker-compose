#!/bin/bash -eu

# Deploy docker-compose application

ENVIRONMENT=$1
FORCE_DESTROY_VOLUMES=${2:-false}
FORCE_RESTART=${3:-false}
SERVICE=${4:-''}

DOCKER_COMPOSE="docker-compose"
result=$(command -pv docker-compose 2>&1 1>/dev/null && echo 0 || echo 1)
if [ "$result" -ne "0" ]; then
  DOCKER_COMPOSE="docker compose"
fi

cd /root/docker/$ENVIRONMENT

echo "Removing unused images if any"
EXITED_IMAGES=$(docker ps -a -f status=exited -q)
if [ "${EXITED_IMAGES}" != "" ]; then
  docker rm ${EXITED_IMAGES}
fi

eval "${DOCKER_COMPOSE} pull ${SERVICE}"

[ -s ./deploy.env ] && source ./deploy.env
DESTROY_VOLUMES=${DESTROY_VOLUMES:-true}
BACKUP_DIR=${BACKUP_DIR:-./backups}
BACKUP_URLS=${BACKUP_URLS:-}
RESTORE_BACKUP=${RESTORE_BACKUP:-}

if [[ -n "${BACKUP_URLS}" ]]; then
  for i in ${BACKUP_URLS[@]}; do
    wget -N -P "${BACKUP_DIR}" "${i}"
  done
fi
   
if [[ -z "${RESTORE_BACKUP}" && "${FORCE_DESTROY_VOLUMES}" == "false" && "${DESTROY_VOLUMES}" == "false" ]]; then
  echo "Keeping volumes"

  compose_params=""
  if [[ "$FORCE_RESTART" == "true" ]]; then
    echo "Forcing restarts"
    compose_params="--force-recreate"
  fi
  eval "${DOCKER_COMPOSE} up -d --no-build --remove-orphans ${compose_params} ${SERVICE}"
else
  echo "Recreating all images and volumes"
  eval "${DOCKER_COMPOSE} down -v"
  if [[ -n "${RESTORE_BACKUP}" ]]; then
    echo "Restoring backup ${RESTORE_BACKUP}"
    eval "${DOCKER_COMPOSE} run --rm backup bash restore.sh \"${RESTORE_BACKUP}\""
  fi
  eval "${DOCKER_COMPOSE} up -d --no-build ${SERVICE}"
fi

containers=$(docker-compose ps -q)
n=0
until [ $n -ge 20 ]
do
  echo "Verifying if docker containers ${containers} are healthy"
  health_check=$(docker inspect --format='{{json .State.Health.Status}}' $containers | sort -u )
  echo "Status found: "${health_check}
  test "${health_check}" = '"healthy"' && exit 0
  echo "Waiting 15s"
  n=$[$n+1]
  sleep 15
done

echo "####################################################"
eval "${DOCKER_COMPOSE} logs"

exit 1
